# app/Dockerfile.prod

###########
# BUILDER #
###########

# pull official base image
FROM python:3.13-slim as builder

# set work directory
WORKDIR /app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc

# lint
RUN pip install --upgrade pip
RUN pip install flake8==6.0.0
COPY . .
RUN flake8 --ignore=E501,F401 .

# install python dependencies
COPY requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.12-slim

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup --system app && adduser --system --group app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# install dependencies
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /app/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app


FROM python:3.12-slim
#ENV PYTHONUNBUFFERED 1
ENV APP_HOME=/seguros/seguros
WORKDIR $APP_HOME
#WORKDIR /seguros

RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    libmagic1 \
    cron \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt requirements.txt
COPY cronseguros.cfg cronseguros.cfg

RUN pip install --upgrade pip && pip install -r requirements.txt

COPY ./seguros/ ./

# Copiar el script de entrada y darle permisos de ejecuci√≥n
COPY entrypoint.sh entrypoint.sh
RUN chmod +x entrypoint.sh

# Configurar el script de entrada como punto de entrada
ENTRYPOINT ["bash","entrypoint.sh"]


